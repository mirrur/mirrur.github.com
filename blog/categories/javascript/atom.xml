<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Mirrur]]></title>
  <link href="http://mirrur.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://mirrur.github.io/"/>
  <updated>2014-11-09T23:42:36+08:00</updated>
  <id>http://mirrur.github.io/</id>
  <author>
    <name><![CDATA[mirrur]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[同一个页面中多个script标签中代码运行情况]]></title>
    <link href="http://mirrur.github.io/blog/2014/09/20/tong-ge-ye-mian-zhong-duo-ge-biao-qian-zhong-dai-ma-yun-xing-qing-kuang/"/>
    <updated>2014-09-20T21:46:15+08:00</updated>
    <id>http://mirrur.github.io/blog/2014/09/20/tong-ge-ye-mian-zhong-duo-ge-biao-qian-zhong-dai-ma-yun-xing-qing-kuang</id>
    <content type="html"><![CDATA[<p>情况①，函数声明提前，后面定义的f1覆盖了前面的f1，故执行到alert时输出6</p>

<pre><code> &lt;script type="text/javascript"&gt;
          var a, b, c;
          function f1(b,c){
               a = b + c;
               return a;
          }
          alert(f1(2,3));
          function f1(b,c){
               a = b * c;
               return a;
          }
 &lt;/script&gt;
//输出6
</code></pre>

<p>情况②，JS是按块加载的。每个<code>&lt;script/&gt;</code>标签作为一块。按顺序执行，在第一个代码块中，f1还没被覆盖，故执行时输出5，执行到第二个代码块，f1被重新定义，此时会alert时输出6</p>

<pre><code> &lt;script type="text/javascript"&gt;
      var a, b, c;
      function f1(b,c){
           a = b + c;
           return a;
      }
      alert(f1(2,3));
 &lt;/script&gt;
 &lt;script type="text/javascript"&gt;    
      function f1(b,c){
           a = b * c;
           return a;
      }
 &lt;/script&gt;
//输出5
</code></pre>

<p>本文链接：<a href="http://mirrur.github.io/blog/2014/09/20/tong-ge-ye-mian-zhong-duo-ge-biao-qian-zhong-dai-ma-yun-xing-qing-kuang/">同一个页面中多个script标签中代码运行情况</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript函数认识]]></title>
    <link href="http://mirrur.github.io/blog/2014/09/16/javascripthan-shu-ren-shi/"/>
    <updated>2014-09-16T12:08:19+08:00</updated>
    <id>http://mirrur.github.io/blog/2014/09/16/javascripthan-shu-ren-shi</id>
    <content type="html"><![CDATA[<p>①函数实际上是对象，每个函数都是Function类型的实例，具有属性和方法。<br/>
②函数是对象，故函数名实际是一个指向函数对象的指针，不会与某个函数绑定。</p>

<p>③函数定义三种方式：</p>

<blockquote><p>  a、函数声明：function a(){ &hellip; }<br/>
  b、函数表达式定义 :var a = function(){ &hellip; }<br/>
  c、Function构造函数:var a = new Function(a, b, c) //最后一个参数始终是函数体，不推荐，两次解析代码，影响性能</p></blockquote>

<p>④函数名仅是指向函数的指针，与包含对象指针的其他变量无不同。【不带括号的函数名访问的是函数指针】<br/>
⑤函数名是函数的指针，故定义同名函数，后者会覆盖前者，所以js中没有函数重载的概念。</p>

<blockquote><p>   函数重载：多个函数用同一个名字，但参数表即参数的个数或数据类型可以不同，调用的时候，虽然方法名字相同，但根据参数表可以自动调用对应的函数。</p></blockquote>

<p>⑥函数声明与函数表达式的区别：</p>

<blockquote><p>  a、他俩唯一的区别在于解析器在向执行环境中加载数据时，顺序不一样。<br/>
  b、解析器先读取函数声明，并使其在执行任何代码之前可调用【声明提前】<br/>
  c、函数表达式要等到解析器执行到它所在的代码行时，才会真正被解析执行。<br/>
  d、函数声明提升过程，读取并将函数声明添加到执行环境中。</p></blockquote>

<p>⑦js中函数名本身就是一个变量，故函数可做为值来使用：</p>

<blockquote><p>  a、将函数像传递参数一样传递给另一个函数<br/>
  b、将一个函数作为另一个函数的结果返回<br/>
  c、可以从一个函数中返回另一个函数</p></blockquote>

<p>⑧在函数内部有两个特殊的对象：</p>

<blockquote><p>  a、arguments是一个类数组对象，包含传入函数中的所有参数，主要用途是保存函数参数。<br/>
【该对象有一属性callee，该属性是一个指针，指向拥有这个arguments对象的函数】<br/>
  b、this引用的是函数据以执行的环境对象<br/>
【哪个对象调用函数，this就指向谁；函数名就一变量，故不管那个对象调用函数，func1()和o.func1()指向的都是同一个函数】<br/>
  c、另一对象属性caller，保存着调用当前函数的函数引用<br/>
【B函数中调用了A，此时A.caller将指向B函数】</p></blockquote>

<p>⑨函数的属性和方法：</p>

<blockquote><p>  a、每个函数包含两个属性：length和prototype<br/>
  *   Ⅰ. length：函数希望接收的命名参数的个数<br/>
  *   Ⅱ. prototype：保存所有实例方法的真正所在<br/>
  b、每个函数都包含两个非继承而来的方法：apply()和call()作用都是在特定的作用域中调用函数，相当于设置函数体内this的值【扩充作用域】。区别仅在于接收参数的方式不同。<br/>
  c、bind()：创建一个函数的实例，this绑定到传给bind的函数的值<br/>
  d、toLocaleString()和toString()：返回函数的代码<br/>
  e、valueOf()：返回函数的代码</p></blockquote>

<p>本文链接：<a href="http://mirrur.github.io/blog/2014/09/16/javascripthan-shu-ren-shi/">javascript函数认识</a></p>
]]></content>
  </entry>
  
</feed>
